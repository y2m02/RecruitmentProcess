@using Kendo.Mvc
@using RecruitmentManagementApp.Models.ViewModels
@{
    ViewData["Title"] = "Candidatos";
}

<style>
    .k-command-cell.k-command-cell.k-command-cell {
        text-align: center;
    }

    .k-grid-content {
        min-height: 70px;
    }

    #btnOpenModal, #btnEdit, #btnDelete {
        color: white;
        font-weight: bold;
    }
</style>

<h1>Candidatos</h1>
<br />
<div>
    @await Html.PartialAsync("UpsertPartial")
    <div>
        @(Html.Kendo().Grid<CandidateViewModel>()
            .Name("Candidates")
            .Columns(columns =>
            {
                columns.Select().Width(50).ClientHeaderTemplate(" ");
                columns.Bound(c => c.Id).Hidden();
                columns.Bound(c => c.Name).Groupable(false).Width(200);
                columns.Bound(c => c.CreatedDate).Format("{0:dd/MM/yyyy}").Width(150);
                columns.Bound(c => c.StatusDescription)
                    .Filterable(ftb => ftb
                        .Multi(true)
                        .CheckAll(false)
                        .Messages(msg => msg.SelectedItemsFormat("{0} opciones seleccionadas"))
                    )
                    .Width(150);
                columns.Bound(c => c.Curriculum).Groupable(false).Width(200);
                columns.Bound(c => c.GitHub).Groupable(false).Width(200);
            })
            .ToolBar(
                x =>
                {
                    x.Custom().Name(" ").IconClass("k-icon k-i-plus").HtmlAttributes(
                        new
                        {
                            id = "btnOpenModal",
                            @class = "btn btn-primary",
                            type = "button",
                        });
                    x.Custom().Name(" ").IconClass("k-icon k-i-edit k-i-pencil").HtmlAttributes(
                        new
                        {
                            id = "btnEdit",
                            @class = "btn btn-success",
                            type = "button",
                            onClick = "editCandidate();",
                        });
                    x.Custom().Name(" ").IconClass("k-icon k-i-close k-i-x").HtmlAttributes(
                        new
                        {
                            id = "btnDelete",
                            @class = "btn btn-danger",
                            type = "button",
                            onClick = "deleteCandidate();",
                        });
                }
            )
            .Resizable(c => c.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] { 20, 35, 50, 100 })
                .Messages(msg => msg
                    .Empty("Sin registros")
                    .ItemsPerPage("registros por página")
                    .First("Ir a la primera página")
                    .Last("Ir a la última página")
                    .Next("Página siguiente")
                    .Previous("Página anterior")
                    .Refresh("Refrescar")
                    .Display("{0} - {1} de {2} registros")
                    .Page("Página")
                    .MorePages("Más páginas")))
            .Navigatable()
            .Sortable()
            .Groupable(g => g.Messages(m => m.Empty("Arrastre una columna hasta aquí para agrupar por dicha columna")))
            .Filterable(filterable => filterable
                .Extra(true)
                .Operators(op =>
                    op.ForString(str => str.Clear()
                        .Contains("Contiene")
                        .DoesNotContain("No contiene")
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .StartsWith("Comienza con")
                        .EndsWith("Termina con"))
                        .ForDate(date => date.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Después de")
                            .IsLessThanOrEqualTo("Hasta")
                            .IsLessThan("Antes de"))
                        .ForNumber(num => num.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Mayor que")
                            .IsLessThanOrEqualTo("Menor o igual que")
                            .IsLessThan("Menor que")))
                .Messages(msg => msg
                    .Info("Mostrar registros con valor que:")
                    .And("Y")
                    .Or("O")
                    .Filter("Filtrar")
                    .Clear("Limpiar")))
            .Scrollable(x => x.Height(450))
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                .Sort(s => s.Add("StatusDescription").Descending())
                .Model(model => model.Id(p => p.Id))
                .Read(read => read.Action("GetAll", "Candidate"))
                .Group(group => group.Add("StatusDescription", typeof(string), ListSortDirection.Ascending))
            ))
    </div>
</div>

@await Html.PartialAsync("DeletePartial")

<script src="~/js/candidate.js"></script>